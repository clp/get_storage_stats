#! /usr/bin/env perl

#TBD Design Note, Tue2011_0823_11:54 
#TBD: Change data structure to array of refs to hashes.
# Each array elt is a hostname, which is a ref to a hash.
# Each hash has keys for the 7 field names, and corresponding values.
#
use strict;
use warnings;

# use Getopt::Long;

use Data::Dumper;

#TBD use Parse::StorageArrayLog qw/match_line/;
#TBD use Parse::StorageArrayLog;

our $VERSION = '0.02';

my $prog = $0;
$prog =~ s{\A.*/}{};    # strip leading path, if any

#TBD: Temp fix; assume only one arg on cmd line: i/p file name.
# Cannot specify multiple i/p files w/ this fix.
my $input_file = $ARGV[0];

#TBD unless ($input_file) {
    #TBD die "no input_file found on command line\n\n", usage();
#TBD }

my @hosts;
my %stats;
my $hostname;


# Read entire file & get hostnames & fill @hosts array.
while (<>) {
    chomp;
    #DBG print "DBG: \$_: ,$_,\n";
    if ( m/Host:\s+(\S+)/ ) {
        $hostname = $1;
        #DBG print "DBG-Tray regex: \$hostname: ,$hostname,\n";
        $stats{$hostname}{hostname} = $hostname  ;
        push  @hosts, $stats{$hostname};
        next;
    }
}  # End while #1.


# =begin comment

#TBD: Process the i/p file again, after @hosts has been filled.
#TBR # Read one paragraph at a time (a block separated by blank lines).
#TBR $/ = '';
my $infile;
open $infile, '<', $input_file  or die "Cannot open $input_file: $!";
while (<$infile>) {
    chomp;
    #TBD Wed2011_0824_14:53  : regex changed, now fails to match Tray lines.
    if ( m/^(\S+)\s+(\d+)\s+Tray\S+\s+(\S+)\s+\S+\s+$/ ) {
        my $volname = $1;
        #DBG print "DBG-Tray regex: \$hostname: ,$hostname,\n";
        my $lun  = $2;
        my $hostname  = $3;
        $stats{$hostname}{hostname} = $hostname  ;
        $stats{$hostname}{volname} = $volname  ;
        $stats{$hostname}{lun} = $lun  ;
        #TBR push  @hosts, $stats{$hostname};
        next;
    }

    if ( m/(\S+)\s+\w+\s+([\d,.]+ \s \w+)\s+ (RAID \s \d+) \s+\w+\s+(\S+)\s*/smx ) {
        #TBD: Is 'RAID' always there, or can a different alpha(numeric?symbols?) string be there?
        #TBD.Wed2011_0824_15:04 : How to get correct $hostname here, to store data?
        #   Use the table linking volname and hostname?
        my $volname = $1;
        my $capacity  = $2;
        my $raid  = $3;
        my $pool  = $4;
        $stats{$hostname}{hostname} = $hostname  ;
        $stats{$hostname}{capacity} = $capacity  ;
        $stats{$hostname}{raid} = $raid  ;
        $stats{$hostname}{pool} = $pool  ;
        next;
    }
}  # End while #2.


# =begin comment

#TBD: Process the i/p file again, after @hosts has been filled.
# Read one paragraph at a time.
$/ = '';
# my $infile;
open $infile, '<', $input_file  or die "Cannot open $input_file: $!";
while (<$infile>) {
    chomp;
    #F if ( m/Volume name:\s (\S+)\s+ Volume handle:\s Volume WWN: \s+(\S+)  \s+ Status:/smx ) {
    #F if ( m/Volume name:\s (\S+)\s+ Volume handle:\s Volume WWN: \s+(\S+)  \s+ Status:/mx ) {
    #F if ( m/Volume name:\s (\S+)\s+ Volume handle:\s Volume WWN: \s+(\S+)  \s+ Status:/x ) {
    #
    #TBD: Maybe do separate read loop of full file for this search only?
    #
    #F if ( m/\s+ Volume.name:\s+ (\S+) \s+ Volume.handle:\s+ \d+/x ){
    #F if ( m/\s+ Volume.name:\s+ (\S+).* Volume.handle:\s+ \d+/msx ){
    if ( m/\s+ Volume.name:\s+ (\S+).*?              # .*?  gets anything including newline, 
                                                     #   until next text (Volume.handle),
                                                     #   in non-greedy mode (the '?' suffix)
      Volume.handle:\s+ \d+.*?                       # Data to skip; TBR?: Remove this line?
      Volume.WWN: \s+(\S+) .*? Status:/msx ) {
      ### \s+ Volume.handle:\s+ Volume.WWN: \s+(\S+)  \s+ Status:/x ) {
        #TBD: Is 'RAID' always there, or can a different alpha(numeric?symbols?) string be there?
        my $volname = $1;
        my $wwn  = $2;
        #DBG values:
        #TBF.Need hostname in this scope; $hostname = $volname =~ /.*/;
        #TMP $volname = 'abcde';
        #TBR my $wwn = 12345;
        #
        #TBD: Look for hostname that matches volname, & use its hash to store volname.
        #? $hostname = grep $volname, $stats{$hostname}{hostname};
        #F my $ho = grep $volname, @hosts;
        #F my $ho = grep {/$volname/}  keys %stats;
        #
        #TBD: How do I know hostname already, at this point? Wed2011_0824_14:43  is it correct?
        #TBR? my $hostname = $stats{$volname}{hostname};
        #
        $stats{$hostname}{volname} = $volname  ;
        $stats{$hostname}{wwn} = $wwn  ;
        next;
    }

# Volume name: rssg101-smbzfs-dev
      # Volume handle: 25
      # Volume WWN: 600A0B800047644600000C0F49D9B6BB
      # Status: Optimal

    #TBD: Write code to Get WWN.
    #
# =end comment

# =cut

}  # End while() #2.

# Print all stored data
#DBG print "\nDBG: Dumper \$_:\n";
#DBG foreach (@hosts) {
    #DBG print "DBG: \$_: ,$_,\n";
    #DBG print Dumper ($_);
    #F print Dumper (%{$_});
#DBG }

print "hostname, lun, volname, capacity, RAID level, pool, WWN\n\n";
foreach my $h (@hosts) {
    #DBG print "DBG-loop at each host array member: \%\$h: ",%$h,"\n";
    print $stats{$h->{hostname}}{hostname}, ", ";
    print $stats{$h->{hostname}}{lun}, ", ";
    print $stats{$h->{hostname}}{volname}, ", ";
    print $stats{$h->{hostname}}{capacity}, ", ";
    print $stats{$h->{hostname}}{raid}, ", ";
    print $stats{$h->{hostname}}{pool}, ", ";
    print $stats{$h->{hostname}}{wwn}, "\n";

    #DBG foreach my $k ( keys %$h ){
    #DBG print "DBG: \$k => \$stats{\$k}:  ", $k , "=> ",  $stats{$h->{hostname}}{$k}, "\n";
    #DBG }
    #DBG print "\n";
}


exit;


sub usage {
    return <<"eousage";
usage $prog: [options] <log_files>

$prog is a filter for Storage Array TBD:config|status|log files.
It searches for host names and presents desired data about them.

Options to control the matching


Output options

-number-output  flag     emit the line number of the matching line on output

-start-column   int      Control what portion of the matching line is displayed.
                         start-column gives the first column of the output line displayed.
-output-length  int      Length of the output line before line numbering, if any.
eousage
}


#TBD: Sample data: RAID line:
# rxsg102-zoneroots       	Optimal	50 GB       	RAID 5    	24   	FCRaid5              	
# rssg101-smbzfs-dev      	Optimal	1,394.482 GB	RAID 5    	26   	FCRaid5              	
#TBD: Sample data: Tray line:
# rssg111-smbzfs-dev      	2  	Tray.85.Controller.A	cal-rssg111           	Optimal      	
#TBD: Sample data: WWN data:
# Volume name: rssg101-smbzfs-dev
      # Volume handle: 25
      # Volume WWN: 600A0B800047644600000C0F49D9B6BB
      # Status: Optimal

