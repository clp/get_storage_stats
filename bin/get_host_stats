#! /usr/bin/env perl
#
use strict;
use warnings;

# use Parse::StorageArrayLog;

# Note - Tue2011_0830_19:02 :
# This variation of get_host_stats reads the i/p file in one pass,
# while the master branch uses two passes.
# Keep this program in a separate git branch, one_pass_over_data_file,
# and *DO NOT MERGE* it into the master branch without careful consideration.
#
our $VERSION = '0.06';

my $prog = $0;
$prog =~ s{\A.*/}{};    # strip leading path, if any

my %stats;
my $volname;
our $volname_for_wwn;

# The main data structure is a hash of hash references.
# Each key in the HoH is a volname; the value is a ref to a data hash.
# Each data hash has keys for the 7 field names; and their values.


# Process the full i/p file by one line at a time.
#
while (<>) {
    chomp;
    if ( m/(\S+)\s+\w+\s+([\d,.]+ \s \w+)\s+ 
            (RAID \s \d+) \s+\w+\s+(\S+)\s*/smx ) {
        # volname is $1.
        $stats{$1}{capacity} = $2  ;
        $stats{$1}{raid} = $3  ;
        $stats{$1}{pool} = $4  ;
        next;
    }

    if ( m/\s+ Volume.name:\s+ (\S+) /msx ) {
        $stats{$1}{volname} = $1  ;
        $volname_for_wwn = $1  ;
        next;
    }

    if ( m/ Volume.WWN: \s+(\S+) /msx ) {
        $stats{$volname_for_wwn}{wwn} = $1;
        next;
    }

    # Note: 
    # The field used here for hostname is really domain name, 
    # which need not be the same as the hostname.  This solution
    # is OK for now, according to the user.
    if ( m/^(\S+)\s+(\d+)\s+Tray\S+\s+(\S+)\s+\S+\s+$/ ) {
        # volname is $1.
        $stats{$1}{hostname} = $3  ;
        $stats{$1}{lun} = $2  ;
        next;
    }
}


# To print, sort on 2 keys: first hostname, then lun.
my @unsorted_volnames = map { $stats{$_}->{volname} } keys %stats;
my @sorted_host_lun = sort 
        { $stats{$a}{hostname} cmp $stats{$b}{hostname}
                                ||
          $stats{$a}{lun} <=> $stats{$b}{lun}
        } @unsorted_volnames;

my @columns = qw( hostname lun volname capacity raid pool wwn);
print "Hostname, LUN, Volume Name, Capacity, RAID level, Pool, WWN\n";
foreach my $v ( @sorted_host_lun ) {
    my @row = ();
    push @row , ( $stats{$v}{$columns[$_]}  ) for (0..$#columns);
    print  ( join(", ",   @row[0 .. ($#row-1)], $row[-1]) );
    print "\n";
}

exit;


sub usage {
    return <<"eousage";
Usage
  $prog <input_file>

$prog is a filter for storage array status files.
It searches for volume names and presents data about them.

Only one input file is allowed for each run of the program.

eousage
}


# Sample data: RAID line:
# rxsg102-zoneroots       	Optimal	50 GB       	RAID 5    	24   	FCRaid5              	
# rssg101-smbzfs-dev      	Optimal	1,394.482 GB	RAID 5    	26   	FCRaid5              	
#
# Sample data: Tray line:
# rssg111-smbzfs-dev      	2  	Tray.85.Controller.A	cal-rssg111           	Optimal      	
#
# Sample data: WWN data:
# Volume name: rssg101-smbzfs-dev
      # Volume handle: 25
      # Volume WWN: BOGUSB800047644600000C0F49DBOGUS
      # Status: Optimal

